package api.db.logos.generated;

import api.db.logos.Logos;
import api.db.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link api.db.logos.Logos}-interface representing
 * entities of the {@code logos}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedLogos {
    
    /**
     * This Field corresponds to the {@link Logos} field that can be obtained
     * using the {@link Logos#getId()} method.
     */
    LongField<Logos, Long> ID = LongField.create(
        Identifier.ID,
        Logos::getId,
        Logos::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Logos} field that can be obtained
     * using the {@link Logos#getPiclink()} method.
     */
    StringField<Logos, String> PICLINK = StringField.create(
        Identifier.PICLINK,
        o -> OptionalUtil.unwrap(o.getPiclink()),
        Logos::setPiclink,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Logos} field that can be obtained
     * using the {@link Logos#getTime()} method.
     */
    ComparableField<Logos, Timestamp, Timestamp> TIME = ComparableField.create(
        Identifier.TIME,
        o -> OptionalUtil.unwrap(o.getTime()),
        Logos::setTime,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Logos} field that can be obtained
     * using the {@link Logos#getResult()} method.
     */
    StringField<Logos, String> RESULT = StringField.create(
        Identifier.RESULT,
        o -> OptionalUtil.unwrap(o.getResult()),
        Logos::setResult,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Logos} field that can be obtained
     * using the {@link Logos#getUsername()} method.
     */
    StringForeignKeyField<Logos, String, Users> USERNAME = StringForeignKeyField.create(
        Identifier.USERNAME,
        Logos::getUsername,
        Logos::setUsername,
        Users.USERNAME,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Logos. The id field corresponds to the database
     * column capitalfun.capitalfun.logos.id.
     * 
     * @return the id of this Logos
     */
    long getId();
    
    /**
     * Returns the piclink of this Logos. The piclink field corresponds to the
     * database column capitalfun.capitalfun.logos.piclink.
     * 
     * @return the piclink of this Logos
     */
    Optional<String> getPiclink();
    
    /**
     * Returns the time of this Logos. The time field corresponds to the
     * database column capitalfun.capitalfun.logos.time.
     * 
     * @return the time of this Logos
     */
    Optional<Timestamp> getTime();
    
    /**
     * Returns the result of this Logos. The result field corresponds to the
     * database column capitalfun.capitalfun.logos.result.
     * 
     * @return the result of this Logos
     */
    Optional<String> getResult();
    
    /**
     * Returns the username of this Logos. The username field corresponds to the
     * database column capitalfun.capitalfun.logos.username.
     * 
     * @return the username of this Logos
     */
    String getUsername();
    
    /**
     * Sets the id of this Logos. The id field corresponds to the database
     * column capitalfun.capitalfun.logos.id.
     * 
     * @param id to set of this Logos
     * @return   this Logos instance
     */
    Logos setId(long id);
    
    /**
     * Sets the piclink of this Logos. The piclink field corresponds to the
     * database column capitalfun.capitalfun.logos.piclink.
     * 
     * @param piclink to set of this Logos
     * @return        this Logos instance
     */
    Logos setPiclink(String piclink);
    
    /**
     * Sets the time of this Logos. The time field corresponds to the database
     * column capitalfun.capitalfun.logos.time.
     * 
     * @param time to set of this Logos
     * @return     this Logos instance
     */
    Logos setTime(Timestamp time);
    
    /**
     * Sets the result of this Logos. The result field corresponds to the
     * database column capitalfun.capitalfun.logos.result.
     * 
     * @param result to set of this Logos
     * @return       this Logos instance
     */
    Logos setResult(String result);
    
    /**
     * Sets the username of this Logos. The username field corresponds to the
     * database column capitalfun.capitalfun.logos.username.
     * 
     * @param username to set of this Logos
     * @return         this Logos instance
     */
    Logos setUsername(String username);
    
    /**
     * Queries the specified manager for the referenced Users. If no such Users
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Users findUsername(Manager<Users> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Logos> {
        
        ID       ("id"),
        PICLINK  ("piclink"),
        TIME     ("time"),
        RESULT   ("result"),
        USERNAME ("username");
        
        private final String columnName;
        private final TableIdentifier<Logos> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "capitalfun";
        }
        
        @Override
        public String getSchemaName() {
            return "capitalfun";
        }
        
        @Override
        public String getTableName() {
            return "logos";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Logos> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}