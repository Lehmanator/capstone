package api.db.logos.generated;

import api.db.logos.Logos;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * api.db.logos.Logos}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedLogosImpl implements Logos {
    
    private long id;
    private String piclink;
    private Timestamp time;
    private String result;
    private String userId;
    
    protected GeneratedLogosImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public Optional<String> getPiclink() {
        return Optional.ofNullable(piclink);
    }
    
    @Override
    public Optional<Timestamp> getTime() {
        return Optional.ofNullable(time);
    }
    
    @Override
    public Optional<String> getResult() {
        return Optional.ofNullable(result);
    }
    
    @Override
    public String getUserId() {
        return userId;
    }
    
    @Override
    public Logos setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Logos setPiclink(String piclink) {
        this.piclink = piclink;
        return this;
    }
    
    @Override
    public Logos setTime(Timestamp time) {
        this.time = time;
        return this;
    }
    
    @Override
    public Logos setResult(String result) {
        this.result = result;
        return this;
    }
    
    @Override
    public Logos setUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "      + Objects.toString(getId()));
        sj.add("piclink = " + Objects.toString(OptionalUtil.unwrap(getPiclink())));
        sj.add("time = "    + Objects.toString(OptionalUtil.unwrap(getTime())));
        sj.add("result = "  + Objects.toString(OptionalUtil.unwrap(getResult())));
        sj.add("userId = "  + Objects.toString(getUserId()));
        return "LogosImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Logos)) { return false; }
        final Logos thatLogos = (Logos)that;
        if (this.getId() != thatLogos.getId()) {return false; }
        if (!Objects.equals(this.getPiclink(), thatLogos.getPiclink())) {return false; }
        if (!Objects.equals(this.getTime(), thatLogos.getTime())) {return false; }
        if (!Objects.equals(this.getResult(), thatLogos.getResult())) {return false; }
      return Objects.equals(this.getUserId(), thatLogos.getUserId());
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getPiclink());
        hash = 31 * hash + Objects.hashCode(getTime());
        hash = 31 * hash + Objects.hashCode(getResult());
        hash = 31 * hash + Objects.hashCode(getUserId());
        return hash;
    }
}