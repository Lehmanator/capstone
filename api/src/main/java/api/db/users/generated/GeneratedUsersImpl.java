package api.db.users.generated;

import api.db.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * api.db.users.Users}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUsersImpl implements Users {
    
    private long id;
    private String username;
    private String password;
    private String firstname;
    private String lastname;
    private String profpicurl;
    private String role;
    
    protected GeneratedUsersImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public String getUsername() {
        return username;
    }
    
    @Override
    public String getPassword() {
        return password;
    }
    
    @Override
    public Optional<String> getFirstname() {
        return Optional.ofNullable(firstname);
    }
    
    @Override
    public Optional<String> getLastname() {
        return Optional.ofNullable(lastname);
    }
    
    @Override
    public Optional<String> getProfpicurl() {
        return Optional.ofNullable(profpicurl);
    }
    
    @Override
    public String getRole() {
        return role;
    }
    
    @Override
    public Users setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Users setUsername(String username) {
        this.username = username;
        return this;
    }
    
    @Override
    public Users setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public Users setFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }
    
    @Override
    public Users setLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }
    
    @Override
    public Users setProfpicurl(String profpicurl) {
        this.profpicurl = profpicurl;
        return this;
    }
    
    @Override
    public Users setRole(String role) {
        this.role = role;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("username = "   + Objects.toString(getUsername()));
        sj.add("password = "   + Objects.toString(getPassword()));
        sj.add("firstname = "  + Objects.toString(OptionalUtil.unwrap(getFirstname())));
        sj.add("lastname = "   + Objects.toString(OptionalUtil.unwrap(getLastname())));
        sj.add("profpicurl = " + Objects.toString(OptionalUtil.unwrap(getProfpicurl())));
        sj.add("role = "       + Objects.toString(getRole()));
        return "UsersImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Users)) { return false; }
        final Users thatUsers = (Users)that;
        if (this.getId() != thatUsers.getId()) {return false; }
        if (!Objects.equals(this.getUsername(), thatUsers.getUsername())) {return false; }
        if (!Objects.equals(this.getPassword(), thatUsers.getPassword())) {return false; }
        if (!Objects.equals(this.getFirstname(), thatUsers.getFirstname())) {return false; }
        if (!Objects.equals(this.getLastname(), thatUsers.getLastname())) {return false; }
        if (!Objects.equals(this.getProfpicurl(), thatUsers.getProfpicurl())) {return false; }
        if (!Objects.equals(this.getRole(), thatUsers.getRole())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getUsername());
        hash = 31 * hash + Objects.hashCode(getPassword());
        hash = 31 * hash + Objects.hashCode(getFirstname());
        hash = 31 * hash + Objects.hashCode(getLastname());
        hash = 31 * hash + Objects.hashCode(getProfpicurl());
        hash = 31 * hash + Objects.hashCode(getRole());
        return hash;
    }
}