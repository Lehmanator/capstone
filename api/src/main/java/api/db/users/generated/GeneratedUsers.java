package api.db.users.generated;

import api.db.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;

/**
 * The generated base for the {@link api.db.users.Users}-interface representing
 * entities of the {@code users}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUsers {
    
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getId()} method.
     */
    LongField<Users, Long> ID = LongField.create(
        Identifier.ID,
        Users::getId,
        Users::setId,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getUsername()} method.
     */
    StringField<Users, String> USERNAME = StringField.create(
        Identifier.USERNAME,
        Users::getUsername,
        Users::setUsername,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getPassword()} method.
     */
    StringField<Users, String> PASSWORD = StringField.create(
        Identifier.PASSWORD,
        Users::getPassword,
        Users::setPassword,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getFirstname()} method.
     */
    StringField<Users, String> FIRSTNAME = StringField.create(
        Identifier.FIRSTNAME,
        o -> OptionalUtil.unwrap(o.getFirstname()),
        Users::setFirstname,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getLastname()} method.
     */
    StringField<Users, String> LASTNAME = StringField.create(
        Identifier.LASTNAME,
        o -> OptionalUtil.unwrap(o.getLastname()),
        Users::setLastname,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getProfpicurl()} method.
     */
    StringField<Users, String> PROFPICURL = StringField.create(
        Identifier.PROFPICURL,
        o -> OptionalUtil.unwrap(o.getProfpicurl()),
        Users::setProfpicurl,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getRole()} method.
     */
    StringField<Users, String> ROLE = StringField.create(
        Identifier.ROLE,
        Users::getRole,
        Users::setRole,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Users. The id field corresponds to the database
     * column capitalfun.capitalfun.users.id.
     * 
     * @return the id of this Users
     */
    long getId();
    
    /**
     * Returns the username of this Users. The username field corresponds to the
     * database column capitalfun.capitalfun.users.username.
     * 
     * @return the username of this Users
     */
    String getUsername();
    
    /**
     * Returns the password of this Users. The password field corresponds to the
     * database column capitalfun.capitalfun.users.password.
     * 
     * @return the password of this Users
     */
    String getPassword();
    
    /**
     * Returns the firstname of this Users. The firstname field corresponds to
     * the database column capitalfun.capitalfun.users.firstname.
     * 
     * @return the firstname of this Users
     */
    Optional<String> getFirstname();
    
    /**
     * Returns the lastname of this Users. The lastname field corresponds to the
     * database column capitalfun.capitalfun.users.lastname.
     * 
     * @return the lastname of this Users
     */
    Optional<String> getLastname();
    
    /**
     * Returns the profpicurl of this Users. The profpicurl field corresponds to
     * the database column capitalfun.capitalfun.users.profpicurl.
     * 
     * @return the profpicurl of this Users
     */
    Optional<String> getProfpicurl();
    
    /**
     * Returns the role of this Users. The role field corresponds to the
     * database column capitalfun.capitalfun.users.role.
     * 
     * @return the role of this Users
     */
    String getRole();
    
    /**
     * Sets the id of this Users. The id field corresponds to the database
     * column capitalfun.capitalfun.users.id.
     * 
     * @param id to set of this Users
     * @return   this Users instance
     */
    Users setId(long id);
    
    /**
     * Sets the username of this Users. The username field corresponds to the
     * database column capitalfun.capitalfun.users.username.
     * 
     * @param username to set of this Users
     * @return         this Users instance
     */
    Users setUsername(String username);
    
    /**
     * Sets the password of this Users. The password field corresponds to the
     * database column capitalfun.capitalfun.users.password.
     * 
     * @param password to set of this Users
     * @return         this Users instance
     */
    Users setPassword(String password);
    
    /**
     * Sets the firstname of this Users. The firstname field corresponds to the
     * database column capitalfun.capitalfun.users.firstname.
     * 
     * @param firstname to set of this Users
     * @return          this Users instance
     */
    Users setFirstname(String firstname);
    
    /**
     * Sets the lastname of this Users. The lastname field corresponds to the
     * database column capitalfun.capitalfun.users.lastname.
     * 
     * @param lastname to set of this Users
     * @return         this Users instance
     */
    Users setLastname(String lastname);
    
    /**
     * Sets the profpicurl of this Users. The profpicurl field corresponds to
     * the database column capitalfun.capitalfun.users.profpicurl.
     * 
     * @param profpicurl to set of this Users
     * @return           this Users instance
     */
    Users setProfpicurl(String profpicurl);
    
    /**
     * Sets the role of this Users. The role field corresponds to the database
     * column capitalfun.capitalfun.users.role.
     * 
     * @param role to set of this Users
     * @return     this Users instance
     */
    Users setRole(String role);
    
    enum Identifier implements ColumnIdentifier<Users> {
        
        ID         ("id"),
        USERNAME   ("username"),
        PASSWORD   ("password"),
        FIRSTNAME  ("firstname"),
        LASTNAME   ("lastname"),
        PROFPICURL ("profpicurl"),
        ROLE       ("role");
        
        private final String columnName;
        private final TableIdentifier<Users> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "capitalfun";
        }
        
        @Override
        public String getSchemaName() {
            return "capitalfun";
        }
        
        @Override
        public String getTableName() {
            return "users";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Users> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}