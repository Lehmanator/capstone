package api.db.applications.generated;

import api.db.applications.Applications;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.OptionalDouble;

/**
 * The generated base for the {@link api.db.applications.Applications}-interface
 * representing entities of the {@code applications}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedApplications {
    
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getId()} method.
     */
    IntField<Applications, Integer> ID = IntField.create(
        Identifier.ID,
        Applications::getId,
        Applications::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getApplicantName()} method.
     */
    StringField<Applications, String> APPLICANT_NAME = StringField.create(
        Identifier.APPLICANT_NAME,
        Applications::getApplicantName,
        Applications::setApplicantName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getAge()} method.
     */
    IntField<Applications, Integer> AGE = IntField.create(
        Identifier.AGE,
        Applications::getAge,
        Applications::setAge,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getIncome()} method.
     */
    IntField<Applications, Integer> INCOME = IntField.create(
        Identifier.INCOME,
        Applications::getIncome,
        Applications::setIncome,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getCreditScore()} method.
     */
    IntField<Applications, Integer> CREDIT_SCORE = IntField.create(
        Identifier.CREDIT_SCORE,
        Applications::getCreditScore,
        Applications::setCreditScore,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getExpenses()} method.
     */
    IntField<Applications, Integer> EXPENSES = IntField.create(
        Identifier.EXPENSES,
        Applications::getExpenses,
        Applications::setExpenses,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getApplicantId()} method.
     */
    StringField<Applications, String> APPLICANT_ID = StringField.create(
        Identifier.APPLICANT_ID,
        Applications::getApplicantId,
        Applications::setApplicantId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getResult()} method.
     */
    ComparableField<Applications, Double, Double> RESULT = ComparableField.create(
        Identifier.RESULT,
        o -> OptionalUtil.unwrap(o.getResult()),
        Applications::setResult,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Applications} field that can be
     * obtained using the {@link Applications#getUserId()} method.
     */
    StringField<Applications, String> USER_ID = StringField.create(
        Identifier.USER_ID,
        Applications::getUserId,
        Applications::setUserId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Applications. The id field corresponds to the
     * database column capitalfun.capitalfun.applications.id.
     * 
     * @return the id of this Applications
     */
    int getId();
    
    /**
     * Returns the applicantName of this Applications. The applicantName field
     * corresponds to the database column
     * capitalfun.capitalfun.applications.applicantName.
     * 
     * @return the applicantName of this Applications
     */
    String getApplicantName();
    
    /**
     * Returns the age of this Applications. The age field corresponds to the
     * database column capitalfun.capitalfun.applications.age.
     * 
     * @return the age of this Applications
     */
    int getAge();
    
    /**
     * Returns the income of this Applications. The income field corresponds to
     * the database column capitalfun.capitalfun.applications.income.
     * 
     * @return the income of this Applications
     */
    int getIncome();
    
    /**
     * Returns the creditScore of this Applications. The creditScore field
     * corresponds to the database column
     * capitalfun.capitalfun.applications.creditScore.
     * 
     * @return the creditScore of this Applications
     */
    int getCreditScore();
    
    /**
     * Returns the expenses of this Applications. The expenses field corresponds
     * to the database column capitalfun.capitalfun.applications.expenses.
     * 
     * @return the expenses of this Applications
     */
    int getExpenses();
    
    /**
     * Returns the applicantId of this Applications. The applicantId field
     * corresponds to the database column
     * capitalfun.capitalfun.applications.applicantId.
     * 
     * @return the applicantId of this Applications
     */
    String getApplicantId();
    
    /**
     * Returns the result of this Applications. The result field corresponds to
     * the database column capitalfun.capitalfun.applications.result.
     * 
     * @return the result of this Applications
     */
    OptionalDouble getResult();
    
    /**
     * Returns the userId of this Applications. The userId field corresponds to
     * the database column capitalfun.capitalfun.applications.userId.
     * 
     * @return the userId of this Applications
     */
    String getUserId();
    
    /**
     * Sets the id of this Applications. The id field corresponds to the
     * database column capitalfun.capitalfun.applications.id.
     * 
     * @param id to set of this Applications
     * @return   this Applications instance
     */
    Applications setId(int id);
    
    /**
     * Sets the applicantName of this Applications. The applicantName field
     * corresponds to the database column
     * capitalfun.capitalfun.applications.applicantName.
     * 
     * @param applicantName to set of this Applications
     * @return              this Applications instance
     */
    Applications setApplicantName(String applicantName);
    
    /**
     * Sets the age of this Applications. The age field corresponds to the
     * database column capitalfun.capitalfun.applications.age.
     * 
     * @param age to set of this Applications
     * @return    this Applications instance
     */
    Applications setAge(int age);
    
    /**
     * Sets the income of this Applications. The income field corresponds to the
     * database column capitalfun.capitalfun.applications.income.
     * 
     * @param income to set of this Applications
     * @return       this Applications instance
     */
    Applications setIncome(int income);
    
    /**
     * Sets the creditScore of this Applications. The creditScore field
     * corresponds to the database column
     * capitalfun.capitalfun.applications.creditScore.
     * 
     * @param creditScore to set of this Applications
     * @return            this Applications instance
     */
    Applications setCreditScore(int creditScore);
    
    /**
     * Sets the expenses of this Applications. The expenses field corresponds to
     * the database column capitalfun.capitalfun.applications.expenses.
     * 
     * @param expenses to set of this Applications
     * @return         this Applications instance
     */
    Applications setExpenses(int expenses);
    
    /**
     * Sets the applicantId of this Applications. The applicantId field
     * corresponds to the database column
     * capitalfun.capitalfun.applications.applicantId.
     * 
     * @param applicantId to set of this Applications
     * @return            this Applications instance
     */
    Applications setApplicantId(String applicantId);
    
    /**
     * Sets the result of this Applications. The result field corresponds to the
     * database column capitalfun.capitalfun.applications.result.
     * 
     * @param result to set of this Applications
     * @return       this Applications instance
     */
    Applications setResult(Double result);
    
    /**
     * Sets the userId of this Applications. The userId field corresponds to the
     * database column capitalfun.capitalfun.applications.userId.
     * 
     * @param userId to set of this Applications
     * @return       this Applications instance
     */
    Applications setUserId(String userId);
    
    enum Identifier implements ColumnIdentifier<Applications> {
        
        ID             ("id"),
        APPLICANT_NAME ("applicantName"),
        AGE            ("age"),
        INCOME         ("income"),
        CREDIT_SCORE   ("creditScore"),
        EXPENSES       ("expenses"),
        APPLICANT_ID   ("applicantId"),
        RESULT         ("result"),
        USER_ID        ("userId");
        
        private final String columnName;
        private final TableIdentifier<Applications> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "capitalfun";
        }
        
        @Override
        public String getSchemaName() {
            return "capitalfun";
        }
        
        @Override
        public String getTableName() {
            return "applications";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Applications> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}